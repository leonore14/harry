{"version":3,"sources":["components/images/harry.jpg","components/images/harry-2.jpg","components/images/harry-3.jpg","components/images/harry-4.jpg","components/images/harry-5.jpg","components/SelectedGif.js","components/Title.js","components/Banner.js","components/Carousel.js","components/Banner2.js","components/Title2.js","components/SelectedGifBanner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SelectedGif","selectedGif1","selectedGif2","selectedGif3","className","src","alt","Title","role","aria-label","Banner","Harry","Carousel","Harry2","Harry3","Harry4","Banner2","Harry5","Title2","SelectedGifBanner","selectedGif4","App","props","handleSelectGif","clickedGif","setState","fetchData","fetch","process","then","res","json","data","dataArray","state","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,yLCa5BC,G,MAXK,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,aAAcC,EAAkC,EAAlCA,aAAeC,EAAmB,EAAnBA,aAChD,OACI,yBAAKC,UAAU,eACX,yBAAKC,IAAKJ,EAAcK,IAAI,MAAMF,UAAU,iBAC5C,yBAAKC,IAAKH,EAAcI,IAAI,MAAMF,UAAU,iBAC5C,yBAAKC,IAAKF,EAAcG,IAAI,MAAMF,UAAU,oBCGzCG,EARD,WACV,OACI,oCACA,wBAAIH,UAAU,SAAd,UAA6B,0BAAMI,KAAK,MAAMC,aAAW,eAA5B,oB,gBCMtBC,EARA,WACX,OACI,yBAAKN,UAAU,UACX,yBAAKC,IAAKM,IAAOL,IAAI,QAAQF,UAAU,iB,gDCSpCQ,EAVE,WACb,OACI,yBAAKR,UAAU,YACX,yBAAKC,IAAKQ,IAAQP,IAAI,SAASF,UAAU,gBACzC,yBAAKC,IAAKS,IAAQR,IAAI,SAASF,UAAU,gBACzC,yBAAKC,IAAKU,IAAQT,IAAI,SAASF,UAAU,kB,gBCCtCY,EARC,WACZ,OACI,yBAAKZ,UAAU,UACX,yBAAKC,IAAKY,IAAQX,IAAI,SAASF,UAAU,kBCItCc,EARA,WACX,OACI,oCACA,wBAAId,UAAU,UAAd,qBAAyC,0BAAMI,KAAK,MAAMC,aAAW,QAA5B,gCCKlCU,EARW,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACzB,OACI,yBAAKhB,UAAU,qBACX,yBAAKC,IAAKe,EAAcd,IAAI,MAAMF,UAAU,mBCkDzCiB,E,kDA1Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAcRC,gBAAkB,SAACC,GACjB,EAAKC,SAAS,CAAExB,aAAcuB,KAhBb,EAmBnBE,UAAY,WACVC,MAAM,8DAAD,OAA+DC,6CACjEC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAI,EAAKP,SAAS,CAAEQ,UAAWD,EAAKA,WApBhD,EAAKE,MAAQ,CACXD,UAAW,GACXhC,aAAa,wDACbC,aAAa,wDACbC,aAAa,uDACbiB,aAAa,yDAPE,E,gEAYjBe,KAAKT,c,+BAaG,IAAD,EACuES,KAAKD,MAA3EjC,EADD,EACCA,aAAcC,EADf,EACeA,aAAcC,EAD7B,EAC6BA,aAAciB,EAD3C,EAC2CA,aAD3C,EACyDa,UAChE,OACC,yBAAK7B,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAaH,aAAcA,EAAcC,aAAcA,EAAcC,aAAcA,IACnF,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAmBiB,aAAcA,S,GApCtBgB,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.478d5719.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/harry.c05cbfaa.jpg\";","module.exports = __webpack_public_path__ + \"static/media/harry-2.c5dad7d5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/harry-3.c770d314.jpg\";","module.exports = __webpack_public_path__ + \"static/media/harry-4.00e118d8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/harry-5.c687c207.jpg\";","import React from 'react';\n\nconst SelectedGif = ({ selectedGif1, selectedGif2 , selectedGif3 }) => {\n    return(\n        <div className='selectedGif'>\n            <img src={selectedGif1} alt=\"gif\" className=\"selectedGif1\" />\n            <img src={selectedGif2} alt=\"gif\" className=\"selectedGif2\" />\n            <img src={selectedGif3} alt=\"gif\" className=\"selectedGif3\" />\n\n        </div>\n    )\n}\n\nexport default SelectedGif;","import React from 'react';\n\nconst Title = () => {\n    return (\n        <>\n        <h1 className=\"title\">Harry  <span role=\"img\" aria-label=\"leafy-green\"> ğŸ¥¬</span></h1>\n        </>\n    )\n}\n\nexport default Title;","import React from 'react';\nimport Harry from './images/harry.jpg';\n\nconst Banner = () => {\n    return(\n        <div className=\"banner\">\n            <img src={Harry} alt=\"harry\" className=\"harryImage\" />   \n        </div>\n    )\n}\n\nexport default Banner ;","import React from 'react';\nimport Harry2 from './images/harry-2.jpg';\nimport Harry3 from './images/harry-3.jpg';\nimport Harry4 from './images/harry-4.jpg';\n\nconst Carousel = () => {\n    return(\n        <div className=\"carousel\">\n            <img src={Harry2} alt=\"harry2\" className=\"harryImage2\" />   \n            <img src={Harry3} alt=\"harry3\" className=\"harryImage3\" />   \n            <img src={Harry4} alt=\"harry4\" className=\"harryImage4\" />   \n        </div>\n    )\n}\n\nexport default Carousel ;","import React from 'react';\nimport Harry5 from './images/harry-5.jpg';\n\nconst Banner2 = () => {\n    return(\n        <div className=\"banner\">\n            <img src={Harry5} alt=\"harry5\" className=\"harryImage5\" />   \n        </div>\n    )\n}\n\nexport default Banner2 ;","import React from 'react';\n\nconst Title2 = () => {\n    return (\n        <>\n        <h1 className=\"title2\">not sorry at all  <span role=\"img\" aria-label=\"fire\"> ğŸ”¥ğŸ”¥</span></h1>\n        </>\n    )\n}\n\nexport default Title2;","import React from 'react';\n\nconst SelectedGifBanner = ({ selectedGif4 }) => {\n    return(\n        <div className='selectedGifBanner'>\n            <img src={selectedGif4} alt=\"gif\" className=\"selectedGif4\" />\n        </div>\n    )\n}\n\nexport default SelectedGifBanner;","import React, { Component } from 'react';\nimport './App.css';\nimport GifList from './components/GifList';\nimport SelectedGif from './components/SelectedGif';\nimport Title from './components/Title';\nimport Banner from './components/Banner';\nimport Carousel from './components/Carousel';\nimport Banner2 from './components/Banner2';\nimport Title2 from './components/Title2';\nimport SelectedGifBanner from './components/SelectedGifBanner';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataArray: [],\n      selectedGif1: `https://media.giphy.com/media/CO3xgSUdsGxb2/giphy.gif`,\n      selectedGif2: `https://media.giphy.com/media/aaY0I3WQfELNS/giphy.gif`,\n      selectedGif3: `https://media.giphy.com/media/nvtj3TWWY7K0/giphy.gif`,\n      selectedGif4: `https://media.giphy.com/media/HiywL3q1m7lrq/giphy.gif`,\n    }\n  }\n\n  componentDidMount() {\n    this.fetchData()\n  }\n\n  handleSelectGif = (clickedGif) => {\n    this.setState({ selectedGif1: clickedGif })\n  }\n\n  fetchData = () => {\n    fetch(`http://api.giphy.com/v1/gifs/search?q=harry+styles&api_key=${process.env.REACT_APP_GIPHY_KEY}`)\n      .then(res => res.json())\n      .then(data => this.setState({ dataArray: data.data }))\n  }\n\n  render() {\n    const { selectedGif1, selectedGif2, selectedGif3, selectedGif4, dataArray } = this.state;\n    return (\n     <div className='container'>\n       <Banner />\n       <Title />\n       <SelectedGif selectedGif1={selectedGif1} selectedGif2={selectedGif2} selectedGif3={selectedGif3} />\n       <Banner2 />\n       <Title2 />\n       <Carousel />\n       <SelectedGifBanner selectedGif4={selectedGif4} />\n       {/*<GifList gifs={dataArray} handleSelectGif={this.handleSelectGif} /> */}\n     </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}